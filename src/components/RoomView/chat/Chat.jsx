import { onValue, push, ref, set } from 'firebase/database';
import React, { useRef, useState } from 'react';
import { useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';
import { database } from '../../../utils/firebase';

import './chat.css';

const Chat = () => {
  const divRef = useRef(null);
  const { roomId } = useParams();
  const { username, teamId } = useSelector((state) => state.player);
  const { team1Id } = useSelector((state) => state.teamOne);
  const { team2Id } = useSelector((state) => state.teamTwo);
  const [msg, setMsg] = useState(''); // this is the currently inputted message by the user
  const [messages, setMessages] = useState({}); // these are all the messages in the chat
  const chatRef = ref(database, `rooms/${roomId}/chat`);

  useEffect(() => {
    onValue(chatRef, (snapshot) => {
      if (snapshot.exists()) {
        const snapshotValue = snapshot.val();
        setMessages(snapshotValue);
      } else {
        // did not find a chatRef
      }
    });
  }, []);

  useEffect(() => {
    divRef.current.scroll({
      top: divRef.current.scrollHeight,
      behavior: 'smooth',
    });
  }, [messages]);

  const handleMsgChange = (e) => setMsg(e.target.value);

  const handleKeyDown = (e) => {
    const isMsgOnlyWhiteSpace = '' === msg.trim(); // don't let them send blank messages
    if (e.key === 'Enter' && !isMsgOnlyWhiteSpace) {
      const messageObjectForFirebase = { username, msg, teamId };
      // The unique key generated by push() is based on a timestamp,
      // so list items are automatically ordered chronologically.
      const newMessageRef = push(chatRef);
      set(newMessageRef, messageObjectForFirebase); // give newMessageRef the content
      setMsg(''); // reset message input state to empty string
    }
  };

  return (
    <div className="chat-container">
      <h3>Chatroom</h3>
      <div className="chat">
        <div className="messages" ref={divRef}>
          {Object.keys(messages).map((message) => {
            if (messages[message]['teamId'] === team1Id)
              return (
                <div key={message} className="team-one-message">
                  <span className="sender">{messages[message]['username']}: </span>
                  {messages[message]['msg']}
                </div>
              );
            else if (messages[message]['teamId'] === team2Id)
              return (
                <div key={message} className="team-two-message">
                  <span className="sender">{messages[message]['username']}: </span>
                  {messages[message]['msg']}
                </div>
              );
            else
              return (
                <div key={message} className="spectator-message">
                  <span className="sender">{messages[message]['username']}: </span>
                  {messages[message]['msg']}
                </div>
              );
          })}
        </div>
      </div>
      <input
        className="message-input"
        placeholder="Type message & press enter"
        onChange={handleMsgChange}
        onKeyDown={handleKeyDown}
        value={msg}
      />
    </div>
  );
};

export default Chat;
